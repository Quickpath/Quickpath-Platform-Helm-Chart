# =============================================================================
# The Kubernetes namespace for platform deployment
kubernetes:
  createnamespace: "false"
  # kubernetes_namespace: "qp-demo-platform"
  platformnamespace: <PROVIDE VALUE>
  infrastructurenamespace: <PROVIDE VALUE>
  # Cluster type options: eks, gks, aks, microk8s
  clustertype: "<PROVIDE VALUE>"

  # Storage class name (optional).  If there is more than one Quickpath instance on the same Azure AKS Cluster,
  # the storage class needs to have different names between instances.  Specify the name or it will default ot app-storage
  # storagename=<PROVIDE VALUE>
  
  # Only used for a microk8s environment when running locally
  #microk8smountpath: "/home/ubuntu/environment/QP-Platform/"
  #is_microk8s_development_environment: "false"


secrets:
  useExternalSecrets: "false"
  externalSecretPath: ""
  region: ""

  # Access Key Auth is for Non-EKS Environments
  auth:
    accessKeyID: ""
    secretAccessKey: ""

  # Assumed Role Authentication
  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to specify the assumed role in remote account
    annotations: {
      eks.amazonaws.com/role-arn: arn:aws:iam
    }



# ingress_type is either "alb" | "microk8s"
loadbalancer:
  ingresstype: "<PROVIDE VALUE>"
  sslenabled: "false"
  # Provide a hostname when multiple ingresses are installed on the same cluster
  # ingresshostname: <PROVIDE VALUE>
  # Load balancer exposed internally or internet facing
  # internal or internet-facing valid values
  ingressscheme: <PROVIDE VALUE>
  # For AWS Ingress :: `arn` of certificate for use in ingress
  #certificate: "<PROVIDE VALUE"


# =============================================================================
# Credentials to authenticate with docker to pull images
dockerhub:
  secretname: "dockerhub-creds"
  dockerfilejson: <PROVIDE VALUE>

# =============================================================================
# Platform Image Tags
image:
  registy: 'docker.io'
  tag: <PROVIDE VALUE>
  # environment is an optional parameter and defaults to production and should only be updated
  # by the Quickpath Support team.  Specify '-dev' to pull interim image tags from the lower environments.
  # environment: -dev

# =============================================================================
# Application Configuration
appdesignconfig:
  replicacount: 1
  gunicornworkercount: '3'
  # alembic_upgrade_or_downgrade: 'upgrade'
  # alembic_revision_guid: 'head'
  # =============================================================================
  # Resource Allocations
  memoryrequest: "512Mi"
  memorylimit: "1Gi"
  cpurequest: "500m"
  cpulimit: "1000m"
  logconsolelevel: "DEBUG"
  logfilelevel: "DEBUG"
  sqlalchemyloglevel: "WARNING"
  rootloglevel: "WARNING"
  # Base64 encoded value used for basic authentication initial
  # password.
  sessionsecret: "UXVpY2twYXRo"

appruntimeconfig:
  replicacountmin: 1
  replicacountmax: 2
  cputhresholdpercentage: 70
  gunicornworkercount: '3'
  # =============================================================================
  # Resource Allocations
  memoryrequest: "512Mi"
  memorylimit: "1Gi"
  cpurequest: "500m"
  cpulimit: "1000m"
  logconsolelevel: "DEBUG"
  logfilelevel: "DEBUG"

appceleryworkerconfig:
  replicacountmin: 1
  replicacountmax: 2
  cputhresholdpercentage: 70
  threadcount: 12

  # =============================================================================
  # Resource Allocations
  memoryrequest: "512Mi"
  memorylimit: "1Gi"
  cpurequest: "500m"
  cpulimit: "1000m"
  logconsolelevel: "DEBUG"
  logfilelevel: "DEBUG"


dashboardconfig:
  replicacount: 1
  gunicornworkercount: '3'
  # =============================================================================
  # Resource Allocations
  memoryrequest: "512Mi"
  memorylimit: "1Gi"
  cpurequest: "500m"
  cpulimit: "1000m"
  logconsolelevel: "DEBUG"
  logfilelevel: "DEBUG"

schedulerconfig:
  memoryrequest: "512Mi"
  memorylimit: "1Gi"
  cpurequest: "200m"
  cpulimit: "400m"
  logconsolelevel: "DEBUG"
  logfilelevel: "DEBUG"

subscriptionconfig:
  memoryrequest: "512Mi"
  memorylimit: "1Gi"
  cpurequest: "200m"
  cpulimit: "400m"
  logconsolelevel: "DEBUG"
  logfilelevel: "DEBUG"
# =============================================================================
# secrets_manager_type is either `aws` | `google` | `azure` | `vault`
secretsmanager:
  managertype: "aws"
  instanceprefix: "<PROVIDE VALUE>"
  # Only Used if using Pod managed service account identity
  #serviceAccountName: ""

  # =========== AWS ===============================================================
  regionname: "us-east-2"
  secretcachingenabled: "false" # "false"

  #Authorization type values: serviceaccount, accesskey
  authtype: "serviceaccount"

  # Base64 Encoded - Secrets Management Credentials (Only used when manager type is aws, gcp, or azure and authtype is accesskey:
  #accesskeyid: <PROVIDE VALUE>
  #secretaccesskey: <PROVIDE VALUE>

  # ======== Vault ==================================================================
  #vaulturl: "http://vault-svc"

  # Base64 Encoded - Secrets Management Credentials (Only used when manager type is vault):
  #vaultusername: ZGV2
  #vaultpassword: RG9ja2VySXNDb29s

  # ======== Azure ====================================================================
  azurevaulturl: '<PROVIDE VALUE>'
  azuretenant: '<PROVIDE VALUE>'
  azureclientid: '<PROVIDE VALUE>'
  azureclientsecret: '<PROVIDE VALUE>'

  # ======== Google ===================================================================
  # Base64 Encoded
  googleserviceaccountjson: '<PROVIDE B64 Encoded Value>'

# =============================================================================
# New Relic Configuration
# If you change `newrelic_environment_name`, you must create the environment config in the "/main/setup/newrelic.ini" file.
newrelic:
  enabled: "false"
  # environmentname: "dev"
  # Base64 Encoded - New Relic License  (Optional)
  # licensekey: NDE0OGUyNzZhM2RlZDFjMGExOGJkMzdhZjdhMzYwNDViZDE3NGY3MQ==


#  Base64 Encoded - MySQL Credentials
# quickpath
mysql:
  rootpassword: <PROVIDE VALUE>
  databasename: <PROVIDE VALUE>
  databaseuser: <PROVIDE VALUE>
  databasepassword: <PROVIDE VALUE>
  databasehost: app-mysql
  databaseport: 3306

# Redis Credentials (Optional)
redis:
  host: app-redis-master
  port: 6379
  #  Base64 Encoded - Redis Credentials (Optional)
  # password:


# UI Authentication
basicauth:
  enabled: true
  expirationminutes: 720

# Google Authentication
# Comment Out if not used
googleauth:
  google_oauth_client_id: <PROVIDE B64 ENCODED VALUE>
  google_oauth_client_secret: "PROVIDE B64 ENCODED VALUE"
  platformbaseurl: "http://dev.quickpath.com"

# Microsoft Authentication
# Comment Out if not used
msal:
  clientid: <PROVIDE VALUE>
  clientsecret: <PROVIDE BASE64 ENCODED VALUE>
  tenantid: <PROVIDE VALUE>
  platformbaseurl: <PROVIDE VALUE>

ai:
  backend: <PROVIDE VALUE> # openai | bedrock | None

# OpenAI
openai:
  apikey: <PROVIDE BASE64 ENCODED VALUE>
  modelid: <PROVIDE VALUE>

# Bedrock
bedrock:
  aws_access_key_id: <PROVIDE BASE64 ENCODED VALUE>
  aws_secret_access_key: <PROVIDE BASE64 ENCODED VALUE>
  aws_region_name: <PROVIDE VALUE>
  bedrock_model_id: <PROVIDE VALUE>